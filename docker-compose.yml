version: "3.9"

networks:
  nw-db:
    driver: bridge

services:
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    restart: always
    volumes:
      - type: bind
        source: ./backend
        target: /data
    ports:
      - "4000:4000"
    networks:
      nw-db: {}
    env_file:
      - ./config/.env
    depends_on:
      postgres:
        condition: service_healthy

  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./frontend
  #     dockerfile: ./Dockerfile
  #   restart: always
  #   volumes:
  #     - type: bind
  #       source: ./frontend
  #       target: /data
  #   ports:
  #     - "3000:3000"
  #   env_file:
  #     - ./config/.env

  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - type: bind
        source: ./db
        target: /var/lib/postgresql/data/pgdata
    restart: always
    ports:
      - $POSTGRES_PORT
    networks:
      nw-db:
        aliases:
          - postgres
    env_file:
      - ./config/.postgres.env
    healthcheck:
      test: pg_isready -d $POSTGRES_DB -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "80:80"
    env_file:
      - ./config/.pgadmin.env
    networks:
      nw-db: {}
    depends_on:
      postgres:
        condition: service_healthy
# volumes:
#   v_react:
#     driver: local
#     driver_opts:
#       type: none
#       o: bind
#       device: $PWD/srcs/react/

